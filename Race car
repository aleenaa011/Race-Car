#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<stdbool.h>
#include<string.h>

struct Race {
    int numberOfLaps;
    int currentLap;
    char firstPlaceDriverName[30];
    char firstPlaceRaceCarColor[20];
};

struct RaceCar {
    char driverName[30];
    char raceCarColor[20];
    int totalLapTime;
};

void printIntro() {
    printf("Welcome to our main event digital race fans!\nI hope everybody has thier snacks because we are about to begin!\n");
}

void printCountDown() {
    printf("Racers Ready! In..\n 5\n 4\n 3\n 2\n 1\n Race!\n");
}

void printFirstPlaceAfterLap(struct Race race) {
    printf("After lap number %d\n", race.currentLap);
    printf("First Place Is: %s in the %s race car!\n",
    race.firstPlaceDriverName, race.firstPlaceRaceCarColor);
}

void printCongratulations(struct RaceCar raceCar) {
    printf("Let's all congratulate %s in the %s race car for an amazing performance.\n", raceCar.driverName,
    raceCar.raceCarColor);
    printf("It truly was a great race and everybody have a goodnight!\n");
}

int calculateTimeToCompleteLap() {
    int speed = (rand() % 10) + 1;
    int acceleration = (rand() % 10) +1;
    int nerves = (rand() % 10) + 1;
    return speed + acceleration + nerves;
}

void updateRaceCar(struct RaceCar* raceCar) {
    int lapTime = calculateTimeToCompleteLap();
    raceCar->totalLapTime += lapTime;
}

void updateFirstPlace(struct Race* race, struct RaceCar*
raceCar1, struct RaceCar* raceCar2) {
    if (raceCar1->totalLapTime <= raceCar2->totalLapTime) {
        strcpy(race->firstPlaceDriverName, raceCar1->driverName);
        strcpy(race->firstPlaceRaceCarColor, 
raceCar1->raceCarColor);
    } else {
        strcpy(race->firstPlaceDriverName, raceCar2->driverName);
        strcpy(race->firstPlaceRaceCarColor, 
raceCar2->raceCarColor);
    }
}

void startRace(struct RaceCar* raceCar1, struct RaceCar*
raceCar2) {
    struct Race race = {5, 1, "", ""};

    for (int lap = 1; lap <= race.numberOfLaps; lap++) {
        updateRaceCar(raceCar1);
        updateRaceCar(raceCar2);
        updateFirstPlace(&race, raceCar1, raceCar2);
        printFirstPlaceAfterLap(race);
        race.currentLap++;
    }

    printCongratulations(*raceCar1);
    printCongratulations(*raceCar2);
}

int main() {
    srand(time(0));

    struct RaceCar raceCar1 = {"Driver1", "Red", 0};
    struct RaceCar raceCar2 = {"Driver2", "Blue", 0};

    printIntro();
    printCountDown();
    startRace(&raceCar1, &raceCar2);
    
    return 0;
}
